April 12th 2023

Wired up FDD to breadboard:
Red is INDEX (pin 8)
Green is DIR SEL (pin 18)
Blue is STEP (pin 20)
White is READ (pin 30)
Yellow is enable MOTOR ON (pin 16)
Orange is DRIVE SELECT 1 (pin 12) [FDD jumper selects it as D1]
Purple is TRACK 0 (pin 26)
Brown is DENSITY SELECT (pin 2)

Power +12vDC is and +5VDC connected to bench power supply

Note that all ines are open collector and active low (TRUE = 0V, FALSE = 5V)
Ouputs need pull up resisters I'm using 220ohm which gets a nive square wave on the oscilliscope.

To start disc:
0. unlatch disc (for some reason if the disc is already in the drive on power on it won't seek track 0 correctly)
1. turn on +12v then +5V
2. latch the disc
3. data should be visible on the read lines and the index lines (!)
4. plugging unpluging the blue jumper shifts the head (use the green jumper to choose direction) 
    - oddly sometimes the head will move the oppositie direction?!

Build firmware with bootloader command hoping to avoid the DFU bootloader starting issues.
Didn't work. Was able to enter bootloader after soldering a jumper onto the board !! Good enough for now - 
should look into getting a STLINK clone - useful for debugging anyway.

Wrote HardwareTimer based code to read a pin - can we do this with interrupts or do we need DMA?

April 15th 2023

Trying to determine how accurate the interrupt based code is - created a PWM with a period of 3us as a tight testSignal
signal. Bizaire behaviour: the output is really really slow in inconsistent.

Doubled the period to 6us and can get consistent results but often the sampled perioud is 12us instead of 6us.

So tried setting the interrupt priority to 0 in order rule out competing with other interrupts. The result was positive! 
Getting a lot more 6us (correct) samples occassionally there is a big 500us or more sample??? 

Tried reducing the overhead of the ISR routine - getting more consistent 3us readings but really really slow; 
I presume the CPU is spending so much time handling interrupts that there is no time to run application code.

then I got one 44738566.01us (WTF) - what is going on.

Changing bck to 6us to see what happens: getting consistent 6.00us reporting but still 
the occassional way out of range value. Suspect the rollver code isn't behaving how I expected.

Removing the rollver code doesn't seem to do anything. So WTF? The errant value is -64959 so
it's a rollover event!! 65536 - 64959 = 576 !! so its exactly negative

Removed rollover code in favour of just a conditional check if the last capture is greater
then the current capture - this works but doesn't handle the case of multiple rollovers 
between captures. I wonder if the rollover interrupt is occurring midway through the
capture interrupt.

Trying 3us again to see if the results are any different. Still hanging. Even trying to
read the input capture seems to hang the CPU - are the interrupts reentering?

Apr 26 
Fixed the python decoding script and can now successfully load the track into 
HxcFloppyEmulator software. One minor issue though: the track index hole isn't 
perfectly aligned with the read sample data.

Presumably this is because `PinSampler::indexHolePassing` takes some time to
execute and thus the hole isn't lined up properly. Also when we stop sampling 
similarly there is a delay whilst more samples are buffered.

Possible ways to fix this:
  1. Do nothing. It seems to be working OK. HxcFloppyEmulator does incorrectly 
     think that the bit rate is variable.

  2. Try to fix this in software by doing as much of the timer setup before
     the index hole interrupt is fired. Ideally just set a register bit to
     enable/disable the read sampler. Less effort.

  3. Do it in hardware: setup a timer trigger on the index pulse to start
     and then stop the timer as the index hole passes. More complex but
     supre precise.

I think I'll try option 2 first. Would be good to use a Hardware Timer for the index
hole though so we can measure the actual RPM of the drive.

30 Apr
Tried to wire up the STEP and DIR pins to the microcontroller but there seems to be
an interference pattern from the READ pin intering with ALL other GPIO pins.

Not sure what to do about that - maybe use a filter to filter out the interfence.

Oddly if I detach the wires BLUE and GREEN from the micro the interference stops.
Maybe cross talk between the wires in the cable I'm using?
